#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –í–≠–ë –ê—Ä–µ–Ω–µ
—Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Replit
"""

import asyncio
import logging
import re
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional

import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from bs4 import BeautifulSoup
import schedule
import time
from threading import Thread
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
VEB_ARENA_URL = "https://veb-arena.com/events"
CHECK_INTERVAL_HOURS = 1  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å
WEB_SERVER_PORT = int(os.getenv("PORT", 8080))  # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

class VebArenaBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.subscribers = set()  # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.current_events = []
        self.notified_dates = set()  # –î–∞—Ç—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.help_command, Command("help"))
        self.dp.message.register(self.check_command, Command("check"))
        self.dp.message.register(self.subscribe_command, Command("subscribe"))
        self.dp.message.register(self.unsubscribe_command, Command("unsubscribe"))
        self.dp.message.register(self.status_command, Command("status"))
        
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üèüÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –í–≠–ë –ê—Ä–µ–Ω—ã!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —Å—Ç–∞–¥–∏–æ–Ω–µ "
            "–∏ –Ω–∞–ø–æ–º–Ω—é, –∫–æ–≥–¥–∞ –Ω–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å.\n\n"
            "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è\n"
            "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        )
        await message.answer(welcome_text)
        
    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –í–≠–ë –ê—Ä–µ–Ω—ã\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –í–≠–ë –ê—Ä–µ–Ω–µ "
            "–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –¥–Ω—è—Ö, –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∞–ª–∫–æ–≥–æ–ª—è.\n\n"
            "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "‚Ä¢ /check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚Ä¢ /subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ /unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
            "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üîî –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
            "‚Ä¢ –ü—Ä–∏—Ö–æ–¥—è—Ç –¢–û–õ–¨–ö–û –≤ –¥–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
            "‚Ä¢ –û–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å (–æ–±—ã—á–Ω–æ —É—Ç—Ä–æ–º)\n"
            "‚Ä¢ –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç\n\n"
            "üîç –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç –∫–∞–∂–¥—ã–π —á–∞—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        await message.answer(help_text)
        
    async def status_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_text = (
            "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"üîó –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self.subscribers)}\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%H:%M:%S')}\n"
            f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä: –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEB_SERVER_PORT}\n"
            f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —à—Ç–∞—Ç–Ω–æ"
        )
        await message.answer(status_text)
        
    async def check_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
        await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
        
        events = await self.get_events_for_today()
        
        if events:
            response = "üö´ –í–ù–ò–ú–ê–ù–ò–ï! –°–µ–≥–æ–¥–Ω—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –∞–ª–∫–æ–≥–æ–ª—è!\n\n"
            response += "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            for event in events:
                response += f"‚Ä¢ {event['title']} –≤ {event['time']}\n"
        else:
            response = "‚úÖ –°–µ–≥–æ–¥–Ω—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç. –ü—Ä–æ–¥–∞–∂–∞ –∞–ª–∫–æ–≥–æ–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞."
            
        await message.answer(response)
        
    async def subscribe_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
        user_id = message.from_user.id
        if user_id not in self.subscribers:
            self.subscribers.add(user_id)
            await message.answer(
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n\n"
                "üîî –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¢–û–õ–¨–ö–û –≤ –¥–Ω–∏, "
                "–∫–æ–≥–¥–∞ –Ω–∞ –í–≠–ë –ê—Ä–µ–Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n"
                "üìÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å —É—Ç—Ä–æ–º.\n"
                "üö´ –í —ç—Ç–∏ –¥–Ω–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∞–ª–∫–æ–≥–æ–ª—è.\n\n"
                "üí° –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç!"
            )
        else:
            await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            
    async def unsubscribe_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe"""
        user_id = message.from_user.id
        if user_id in self.subscribers:
            self.subscribers.remove(user_id)
            await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        else:
            await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

    async def get_events_for_today(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            events = await self.parse_veb_arena_events()
            today = datetime.now().date()
            
            today_events = []
            for event in events:
                if event['date'].date() == today:
                    today_events.append(event)
                    
            return today_events
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
    
    async def parse_veb_arena_events(self) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π —Å —Å–∞–π—Ç–∞ –í–≠–ë –ê—Ä–µ–Ω—ã"""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
                
                async with session.get(VEB_ARENA_URL, headers=headers) as response:
                    if response.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ HTTP: {response.status}")
                        return []
                        
                    html = await response.text()
                    
            soup = BeautifulSoup(html, 'html.parser')
            events = []
            
            # –ò—â–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É –¥–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ
            date_pattern = r'(\d{1,2})\s*(–≤—Å|–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±).*?(\d{1,2}:\d{2})'
            text_content = soup.get_text()
            
            matches = re.finditer(date_pattern, text_content, re.IGNORECASE)
            for match in matches:
                try:
                    day = int(match.group(1))
                    time_str = match.group(3)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ (—Ç–µ–∫—É—â–∏–π)
                    now = datetime.now()
                    event_date = datetime(now.year, now.month, day)
                    
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                    if event_date < now:
                        if now.month == 12:
                            event_date = datetime(now.year + 1, 1, day)
                        else:
                            event_date = datetime(now.year, now.month + 1, day)
                    
                    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º —Å –¥–∞—Ç–æ–π
                    context_start = max(0, match.start() - 100)
                    context_end = min(len(text_content), match.end() + 100)
                    context = text_content[context_start:context_end]
                    
                    # –ò—â–µ–º –¶–°–ö–ê –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    if '–¶–°–ö–ê' in context:
                        event_title = self.extract_event_title(context)
                        
                        events.append({
                            'title': event_title,
                            'date': event_date,
                            'time': time_str
                        })
                        
                except ValueError:
                    continue
            
            return events
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []
    
    def extract_event_title(self, context: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã-—Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        teams = ['–ê–∫—Ä–æ–Ω', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–ë–∞–ª—Ç–∏–∫–∞', '–°–ø–∞—Ä—Ç–∞–∫', '–ö—Ä—ã–ª—å—è –°–æ–≤–µ—Ç–æ–≤', 
                '–ü–∞—Ä–∏ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–û—Ä–µ–Ω–±—É—Ä–≥', '–î–∏–Ω–∞–º–æ', '–î–∏–Ω–∞–º–æ –ú–∞—Ö–∞—á–∫–∞–ª–∞',
                '–°–æ—á–∏', '–†–æ—Å—Ç–æ–≤', '–ó–µ–Ω–∏—Ç', '–õ–æ–∫–æ–º–æ—Ç–∏–≤']
        
        for team in teams:
            if team in context:
                return f"–¶–°–ö–ê ‚Äî {team}"
                
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if '–¶–°–ö–ê' in context:
            return "–ú–∞—Ç—á –¶–°–ö–ê"
            
        return "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –í–≠–ë –ê—Ä–µ–Ω–µ"
    
    async def check_and_notify(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            events = await self.get_events_for_today()
            today = datetime.now().date()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
            # 1. –ï—Å—Ç—å —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è
            # 2. –ï—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
            # 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
            if events and self.subscribers and today not in self.notified_dates:
                message = "üö´ –í–ù–ò–ú–ê–ù–ò–ï! –°–µ–≥–æ–¥–Ω—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –∞–ª–∫–æ–≥–æ–ª—è!\n\n"
                message += "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                for event in events:
                    message += f"‚Ä¢ {event['title']} –≤ {event['time']}\n"
                
                message += "\nüí° –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                sent_count = 0
                for user_id in self.subscribers.copy():
                    try:
                        await self.bot.send_message(user_id, message)
                        sent_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                        if "bot was blocked" in str(e).lower():
                            self.subscribers.discard(user_id)
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                self.notified_dates.add(today)
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö {today}")
                
            elif events:
                logger.info(f"‚ÑπÔ∏è –°–æ–±—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ {today}, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å")
            else:
                logger.info(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ {today} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            week_ago = today - timedelta(days=7)
            self.notified_dates = {date for date in self.notified_dates if date > week_ago}
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_and_notify: {e}")
    
    def schedule_checker(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        schedule.every().hour.do(lambda: asyncio.create_task(self.check_and_notify()))
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    async def web_server(self):
        """–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Replit"""
        async def health_check(request):
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
            return web.Response(
                text=f"‚úÖ VEB Arena Bot is running!\n"
                     f"üïê Current time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                     f"üë• Subscribers: {len(self.subscribers)}\n"
                     f"üîÑ Status: Active",
                content_type='text/plain'
            )
        
        async def api_status(request):
            """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
            return web.json_response({
                'status': 'active',
                'subscribers': len(self.subscribers),
                'timestamp': datetime.now().isoformat(),
                'uptime': 'running'
            })
        
        app = web.Application()
        app.router.add_get('/', health_check)
        app.router.add_get('/status', api_status)
        app.router.add_get('/health', health_check)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', WEB_SERVER_PORT)
        await site.start()
        logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEB_SERVER_PORT}")
        logger.info(f"üîó –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{WEB_SERVER_PORT}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await self.web_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = Thread(target=self.schedule_checker, daemon=True)
        scheduler_thread.start()
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await self.check_and_notify()
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ó–∞–ø—É—Å–∫ polling
        await self.dp.start_polling(self.bot)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç BOT_TOKEN –≤ Replit –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ")
        return
        
    bot = VebArenaBot(BOT_TOKEN)
    
    try:
        asyncio.run(bot.start())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
